/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AdministrativeRole.GlobalEnterprise;

import Business.EcoSystem;
import Business.Employee.Consumer.Consumer;
import Business.Enterprise.Enterprise;
import Business.Organization.GlobalEnergy.ConsumerOrganization;
import Business.Organization.LocalEnergy.LocalManagerEnergyOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.Color;
import java.util.Date;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

/**
 *
 * @author neera
 */
public class BAForGlobalEnterprsie extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private EcoSystem business;

    /**
     * Creates new form BuisnessAnalysisForGlobalEnterprsie
     */
    public BAForGlobalEnterprsie(JPanel userProcessContainer, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.business = business;
        populateConsumerJCombo();
    }

    public void populateConsumerJCombo() {
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof ConsumerOrganization) {
                for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                    cmbConsumer.addItem(ua);
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbConsumer = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        GlobalConsumptionTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnShowTimelineChart = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Global Enterprise Dashboard");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(233, 16, -1, -1));

        add(cmbConsumer, new org.netbeans.lib.awtextra.AbsoluteConstraints(206, 58, 288, -1));

        GlobalConsumptionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DateTime", "Power Consumed"
            }
        ));
        jScrollPane2.setViewportView(GlobalConsumptionTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 186, 586, 326));

        jLabel3.setText("Consumers user Account");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 62, -1, -1));

        btnShowTimelineChart.setText("Show TimeLine Chart");
        btnShowTimelineChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowTimelineChartActionPerformed(evt);
            }
        });
        add(btnShowTimelineChart, new org.netbeans.lib.awtextra.AbsoluteConstraints(201, 100, -1, -1));

        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });
        add(btnSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(515, 53, -1, -1));

        jLabel2.setText("Power consumed per Timestamp");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(201, 147, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowTimelineChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowTimelineChartActionPerformed
        // TODO add your handling code here:
        try {
            UserAccount ua = (UserAccount) cmbConsumer.getSelectedItem();
            if (ua.getEmployee() instanceof Consumer) {
                populatePowerAnalysisChart((Consumer) ua.getEmployee());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "The Enterprise should be populated.");
        }


    }//GEN-LAST:event_btnShowTimelineChartActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        // TODO add your handling code here:

        try {
            UserAccount ua = (UserAccount) cmbConsumer.getSelectedItem();
            if (ua.getEmployee() instanceof Consumer) {
                populateGlobalConsumptionData((Consumer) ua.getEmployee());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "The Enterprise should be populated.");
        }


    }//GEN-LAST:event_btnSelectActionPerformed

    public void populateGlobalConsumptionData(Consumer consumer) {
        DefaultTableModel model = (DefaultTableModel) GlobalConsumptionTable.getModel();

        model.setRowCount(0);
        for (Map.Entry<Date, Integer> entry : consumer.getSensor().getGlobalConsumptionList().entrySet()) {
            Object[] row = new Object[2];
            row[0] = entry.getKey();
            row[1] = entry.getValue();
            model.addRow(row);
        }

    }

    private void populatePowerAnalysisChart(Consumer consumer) {

        TimeSeries s1 = new TimeSeries("Power on Time drop");
        TimeSeriesCollection dataset = new TimeSeriesCollection();
        final JFreeChart chart = ChartFactory.createTimeSeriesChart("Power vs Time in Local Area Battery",
                "Timestamp",
                "Power", dataset,
                true,
                true,
                false);
        ChartFrame frame = new ChartFrame("XY Chart For Analysis", chart);
        frame.setVisible(true);
        frame.setSize(800, 680);
        XYPlot p = chart.getXYPlot();
        p.setRangeGridlinePaint(Color.BLACK);
        for (Map.Entry<Date, Integer> entry : consumer.getSensor().getGlobalConsumptionList().entrySet()) {

            s1.add(new Millisecond(entry.getKey()), entry.getValue());

        }

        dataset.addSeries(s1);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable GlobalConsumptionTable;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnShowTimelineChart;
    private javax.swing.JComboBox cmbConsumer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
