/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ConsumerRole;

import Business.EcoSystem;
import Business.Employee.Consumer.Consumer;
import Business.Employee.Consumer.Device;
import Business.Enterprise.Enterprise;
import Business.LocalEnergy.CommunitySensor;
import Business.Organization.GlobalEnergy.ConsumerOrganization;
import Business.Utils.MyIntegerVerifier;
import Business.Utils.MyStringVerifier;

import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author neera
 */
public class ConsumerConnectToElectricty extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private ConsumerOrganization organization;
    private Enterprise enterprise;
    private Consumer consumer;
    private EcoSystem business;
    private CommunitySensor communitySensor;
    private Boolean isMyEnergyStarted;
    private Boolean isMyDeviceConnected;
    private ArrayList<Device> tempDeviceList;
    private Random random;
    private int userTempereture;
    private int userWindSpeed;

    /**
     * Creates new form ConsumerAddDevice
     */
    public ConsumerConnectToElectricty(JPanel userProcessContainer, Consumer consumer, ConsumerOrganization organization, Enterprise enterprise, EcoSystem business, CommunitySensor communitySensor) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.consumer = consumer;
        this.business = business;
        this.communitySensor = communitySensor;
        isMyEnergyStarted = false;
        isMyDeviceConnected = false;
        random = new Random();
        tempDeviceList = new ArrayList<>();

        userTempereture = random.nextInt(100);
        userWindSpeed = random.nextInt(20);

    }

    private void start() {

        final DefaultTableModel dtm = (DefaultTableModel) tblConsumerMessage.getModel();
        // dtm.setRowCount(0);
        Thread worker = new Thread() {
            public void run() {

                while (isMyEnergyStarted) // Simulate doing something useful.
                {

                    //Set to 00 for Global Consumption
                    //Set to random for weather dependent input
                    //Random values have to be between 1 to 50 for temperature
                    //Random values for Wind needs to 1 to 60 
                    //
                    communitySensor.getLocalEnergy().setTempereture(userTempereture);
                    communitySensor.getLocalEnergy().setWindVelocity(userWindSpeed);

                    String Message = consumer.getSensor().smartSwitch(communitySensor);
                    System.out.println(Message);

                    Object[] row = new Object[1];
                    row[0] = Message;

                    dtm.addRow(row);

                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        System.out.println(e.getCause());
                    }
                }

                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        System.out.println("Complete");
                    }
                });

            }
        };

        worker.start();
    }

    public void populateDevices() {
        cmbDevice.removeAllItems();
        for (Device d : tempDeviceList) {
            cmbDevice.addItem(d);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAddDevices = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        deviceConnectionTable = new javax.swing.JTable();
        btnStartStop = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblConsumerMessage = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        cmbDevice = new javax.swing.JComboBox();
        btnStopMyEnergy = new javax.swing.JButton();
        btnDisconnectMyDevice = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        disconnectedDeviceTable = new javax.swing.JTable();
        btnReconnected = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtPower = new javax.swing.JTextField();
        btnAddDevices1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtDeviceName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDeviceVoltage = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtTempereture = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtWindSpeed = new javax.swing.JTextField();
        btnCheckEffect = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 1, 36)); // NOI18N
        jLabel1.setText("Consumer Connect To Electricity");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(252, 16, -1, -1));

        jLabel2.setText("Devices");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 125, -1, -1));

        btnAddDevices.setText("Connect My Devices");
        btnAddDevices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDevicesActionPerformed(evt);
            }
        });
        add(btnAddDevices, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 210, 264, -1));

        deviceConnectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device Name", "Device Power", "Device Voltage Drawn"
            }
        ));
        jScrollPane1.setViewportView(deviceConnectionTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 257, 1074, 151));

        btnStartStop.setText("Start My Clean Integrated Energy");
        btnStartStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartStopActionPerformed(evt);
            }
        });
        add(btnStartStop, new org.netbeans.lib.awtextra.AbsoluteConstraints(327, 742, 410, -1));

        tblConsumerMessage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sensor Message"
            }
        ));
        jScrollPane2.setViewportView(tblConsumerMessage);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 771, 1074, 150));

        btnBack.setText("<<back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 930, 111, -1));

        add(cmbDevice, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 122, 201, -1));

        btnStopMyEnergy.setText("Stop My Clean Energy");
        btnStopMyEnergy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopMyEnergyActionPerformed(evt);
            }
        });
        add(btnStopMyEnergy, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 930, 275, -1));

        btnDisconnectMyDevice.setText("Disconnect My device");
        btnDisconnectMyDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectMyDeviceActionPerformed(evt);
            }
        });
        add(btnDisconnectMyDevice, new org.netbeans.lib.awtextra.AbsoluteConstraints(388, 434, 258, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Connected Devices Table");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 196, -1, -1));

        disconnectedDeviceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device Name", "Device Power", "Device Voltage Drawn"
            }
        ));
        jScrollPane3.setViewportView(disconnectedDeviceTable);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 510, 1074, 151));

        btnReconnected.setText("Reconnect My Device Back");
        btnReconnected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReconnectedActionPerformed(evt);
            }
        });
        add(btnReconnected, new org.netbeans.lib.awtextra.AbsoluteConstraints(387, 679, 267, -1));

        jLabel4.setText("Disconnected Device List");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 472, -1, -1));
        add(txtPower, new org.netbeans.lib.awtextra.AbsoluteConstraints(875, 151, 189, -1));

        btnAddDevices1.setText("Add Device");
        btnAddDevices1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDevices1ActionPerformed(evt);
            }
        });
        add(btnAddDevices1, new org.netbeans.lib.awtextra.AbsoluteConstraints(976, 210, -1, -1));

        jLabel5.setText("Device Name");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(763, 66, -1, -1));
        add(txtDeviceName, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 60, 189, -1));

        jLabel6.setText("Device Voltage");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(763, 110, -1, -1));
        add(txtDeviceVoltage, new org.netbeans.lib.awtextra.AbsoluteConstraints(875, 107, 189, -1));

        jLabel7.setText("Device Power");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(763, 154, -1, -1));

        jLabel8.setText("Sensor Messages");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 742, -1, -1));

        jLabel9.setText("Add Devices");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(875, 27, -1, -1));

        jLabel10.setText("Tempereture");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 670, -1, -1));
        add(txtTempereture, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 670, 120, -1));

        jLabel11.setText("Wind Speed");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 710, -1, -1));
        add(txtWindSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 710, 120, -1));

        btnCheckEffect.setText("Check Effect");
        btnCheckEffect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckEffectActionPerformed(evt);
            }
        });
        add(btnCheckEffect, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 740, -1, -1));

        jLabel12.setText("MPH");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 710, -1, -1));

        jLabel13.setText("Degree C");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 670, -1, -1));

        jLabel14.setText("V");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 110, 20, -1));

        jLabel15.setText("KW");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 150, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void populateDisconnectedDeviceTable(Device selectedDevice) {
        DefaultTableModel dtm = (DefaultTableModel) disconnectedDeviceTable.getModel();
        // dtm.setRowCount(0);
        try {
            if (!isMyDeviceConnected) {
                Object[] row = new Object[3];
                row[0] = selectedDevice;
                row[1] = selectedDevice.getPower();
                row[2] = selectedDevice.getDeviceConsumptionEquivalentInVoltage();

                dtm.addRow(row);
            } else {
                //Find the row which contains object and delete it
                int rowNumber = getTableData(disconnectedDeviceTable, selectedDevice);
                dtm.removeRow(rowNumber);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No device to disconnect");
        }

    }

    private void populateDeviceTable(Device selectedDevice) {
        DefaultTableModel dtm = (DefaultTableModel) deviceConnectionTable.getModel();
        // dtm.setRowCount(0);

        try {
            if (isMyDeviceConnected) {
                Object[] row = new Object[3];
                row[0] = selectedDevice;
                row[1] = selectedDevice.getPower();
                row[2] = selectedDevice.getDeviceConsumptionEquivalentInVoltage();
                dtm.addRow(row);

                //Adding Device List to connected device
                consumer.getSensor().getBattery().getDevices().addDevice(selectedDevice);

            } else {
                //Find the row which contains object and delete it
                int rowNumber = getTableData(deviceConnectionTable, selectedDevice);
                dtm.removeRow(rowNumber);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No devices are in list");
        }

    }

// Gets the row number of element to remove
    public int getTableData(JTable table, Device d) {
        Device dd = new Device();
        int rowNumber = 0;
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        int nRow = dtm.getRowCount(), nCol = dtm.getColumnCount();
        Object[][] tableData = new Object[nRow][nCol];
        for (int i = 0; i < nRow; i++) {
            for (int j = 0; j < nCol; j++) {
                tableData[i][j] = dtm.getValueAt(i, j);

                dd = (Device) tableData[i][0];
                if (dd == d) {
                    System.out.println(d);
                    rowNumber = i;
                    break;
                }
            }
            System.out.println();
        }
        return rowNumber;
    }
    private void btnAddDevicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDevicesActionPerformed
        // TODO add your handling code here:
        isMyDeviceConnected = true;
        Device selectedDevice = (Device) cmbDevice.getSelectedItem();
        populateDeviceTable(selectedDevice);

    }//GEN-LAST:event_btnAddDevicesActionPerformed

    public void stopMyEnergy() {
        btnStopMyEnergy.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                isMyEnergyStarted = false;
                System.out.println("Action performed");
            }
        });

    }
    private void btnStartStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartStopActionPerformed
        // TODO add your handling code here:

        isMyEnergyStarted = true;

        start();


    }//GEN-LAST:event_btnStartStopActionPerformed


    private void btnStopMyEnergyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopMyEnergyActionPerformed
        // TODO add your handling code here:
        isMyEnergyStarted = false;
        stopMyEnergy();
    }//GEN-LAST:event_btnStopMyEnergyActionPerformed

    private void btnDisconnectMyDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectMyDeviceActionPerformed
        // TODO add your handling code here:
        isMyDeviceConnected = false;
        int selectedRow = deviceConnectionTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }
        Device removedDevice = (Device) deviceConnectionTable.getValueAt(selectedRow, 0);

        //Check here.
        consumer.getSensor().getBattery().getDevices().removeDevice(removedDevice);
        //
        for (Device d : consumer.getSensor().getBattery().getDevices().getDeviceList()) {
            JOptionPane.showMessageDialog(null, "The devices in the list are" + d.getDeviceName());
        }

        consumer.getSensor().smartSwitch(communitySensor);
        populateDisconnectedDeviceTable(removedDevice);
        populateDeviceTable(removedDevice);

    }//GEN-LAST:event_btnDisconnectMyDeviceActionPerformed

    private void btnReconnectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReconnectedActionPerformed
        // TODO add your handling code here:
        int selectedRow = disconnectedDeviceTable.getSelectedRow();
        isMyDeviceConnected = true;
        if (selectedRow < 0) {
            return;
        }
        Device reconnectedDevice = (Device) disconnectedDeviceTable.getValueAt(selectedRow, 0);
        //This will add the 
        populateDeviceTable(reconnectedDevice);
        //Remove from the reconnected battery
        populateDisconnectedDeviceTable(reconnectedDevice);

    }//GEN-LAST:event_btnReconnectedActionPerformed

    private void btnAddDevices1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDevices1ActionPerformed
        // TODO add your handling code here:

        MyIntegerVerifier intVerify = new MyIntegerVerifier();
        MyStringVerifier stringVerify = new MyStringVerifier();

        if (intVerify.verify(txtPower) && intVerify.verify(txtDeviceVoltage) && stringVerify.verify(txtDeviceName)) {
            Device d = new Device();

            d.setDeviceName(txtDeviceName.getText());
            int power = Integer.parseInt(txtPower.getText());
            if (power == 0) {
                JOptionPane.showMessageDialog(null, "Power Cannot be 0 )");
                return;
            }
            d.setPower(power);

            int voltage = Integer.parseInt(txtDeviceVoltage.getText());
            if (voltage >= 336) {
                JOptionPane.showMessageDialog(null, "You cannot draw volatge more than 336");
                return;
            }

            d.setDeviceConsumptionEquivalentInVoltage(voltage);
            tempDeviceList.add(d);
            JOptionPane.showMessageDialog(null, "Your device added to list");

        } else {
            JOptionPane.showMessageDialog(null, "Wrong inputs");
        }
        populateDevices();

    }//GEN-LAST:event_btnAddDevices1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        //  JOptionPane.showMessageDialog(null, "Please Disconnect the devices and stop the energy before leaving");
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

        //Remove All the Devices
        //consumer.getSensor().getBattery().getDevices().getDeviceList().removeAll(tempDeviceList);

    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCheckEffectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckEffectActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "For discharging local area batteries set tempereture below 25 and wind speed below 8.");
        MyIntegerVerifier intVerify = new MyIntegerVerifier();
        try {
            userTempereture = Integer.parseInt(txtTempereture.getText());
        } catch (NumberFormatException n) {
            JOptionPane.showMessageDialog(null, "You have entered some wrong data");

        }

        if (intVerify.verify(txtTempereture) && intVerify.verify(txtWindSpeed)) {

            userWindSpeed = Integer.parseInt(txtWindSpeed.getText());

        } else if (txtTempereture.getText().isEmpty()) {
            userTempereture = random.nextInt(60);
            userWindSpeed = random.nextInt(50);
        }


    }//GEN-LAST:event_btnCheckEffectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDevices;
    private javax.swing.JButton btnAddDevices1;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckEffect;
    private javax.swing.JButton btnDisconnectMyDevice;
    private javax.swing.JButton btnReconnected;
    private javax.swing.JButton btnStartStop;
    private javax.swing.JButton btnStopMyEnergy;
    private javax.swing.JComboBox cmbDevice;
    private javax.swing.JTable deviceConnectionTable;
    private javax.swing.JTable disconnectedDeviceTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblConsumerMessage;
    private javax.swing.JTextField txtDeviceName;
    private javax.swing.JTextField txtDeviceVoltage;
    private javax.swing.JTextField txtPower;
    private javax.swing.JTextField txtTempereture;
    private javax.swing.JTextField txtWindSpeed;
    // End of variables declaration//GEN-END:variables
}
