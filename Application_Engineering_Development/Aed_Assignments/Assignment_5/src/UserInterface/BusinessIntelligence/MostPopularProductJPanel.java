/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.BusinessIntelligence;

import Business.Business;
import Business.Customer;
import Business.Order;
import Business.OrderCatalog;
import Business.OrderItem;
import Business.Product;
import Business.Sales;
import Business.Supplier;
import Business.orderComparator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Neerajsing Rajput
 */
public class MostPopularProductJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    Business business;

    /**
     * Creates new form MostPopularProductJPanel
     */
    public MostPopularProductJPanel(JPanel upc, Business b) {
        initComponents();
        userProcessContainer = upc;
        business = b;
        mostPopularCustomer();
    }

    public void mostPopularCustomer() {
        DefaultTableModel dtm = (DefaultTableModel) topProductTable.getModel();
        dtm.setRowCount(0);
        DefaultTableModel dtm1 = (DefaultTableModel) topProductTableOrderCatalog.getModel();
        dtm1.setRowCount(0);
        int sameProductQty = 0;
        ArrayList<OrderItem> arrayOrderItem = new ArrayList<OrderItem>();
        List<Product> productList = new ArrayList<Product>();
        for (Sales s : business.getSalesDirectory().getSalesList()) {
            for (OrderItem oi : s.getOrder().getOrderItemList()) {
                Object row[] = new Object[2];
                row[0] = oi.getProduct();
                row[1] = oi.getQuantity();
                dtm.addRow(row);
                arrayOrderItem.add(oi);
                productList.add(oi.getProduct());
            }
        }
        Set<OrderItem> set;
        set = new HashSet<OrderItem>();
        for (OrderItem oi : arrayOrderItem) {
            set.add(oi);
        }
        Set<Product> duplicateProduct = findDuplicates(productList);

        TreeMap<Integer, String> map = new TreeMap<Integer, String>();
        for (OrderItem oi : set) {

            if (duplicateProduct.contains(oi.getProduct())) {
                String duplicateProductName = oi.getProduct().getProdName();
                sameProductQty += oi.getQuantity();
                if (sameProductQty > oi.getQuantity()) {

                    map.put(sameProductQty, duplicateProductName);

                }
            } else {

                map.put(oi.getQuantity(), oi.getProduct().getProdName());
            }

        }
        for (Map.Entry<Integer, String> entry : map.entrySet()) {
            Integer key = entry.getKey();
            String value = entry.getValue();

        }

        for (Map.Entry<Integer, String> entry : entriesSortedByValues(map)) {
            Integer key = entry.getKey();
            String value = entry.getValue();
            Object row[] = new Object[2];
            row[0] = value;
            row[1] = key;
            dtm1.addRow(row);
        }
    }

    static <K, V extends Comparable<? super V>>
            List<Entry<K, V>> entriesSortedByValues(Map<K, V> map) {

        List<Entry<K, V>> sortedEntries = new ArrayList<Entry<K, V>>(map.entrySet());

        Collections.sort(sortedEntries,
                new Comparator<Entry<K, V>>() {
                    @Override
                    public int compare(Entry<K, V> e1, Entry<K, V> e2) {
                        return e2.getValue().compareTo(e1.getValue());
                    }
                }
        );

        return sortedEntries;
    }

    public static Set<Product> findDuplicates(List<Product> listContainingDuplicates) {
        final Set<Product> setToReturn = new HashSet<Product>();
        final Set<Product> set1 = new HashSet<Product>();
        for (Product yourInt : listContainingDuplicates) {
            if (!set1.add(yourInt)) {
                setToReturn.add(yourInt);
            }
        }
        return setToReturn;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        topProductTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        topProductTableOrderCatalog = new javax.swing.JTable();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        topProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Product", "Sales Volume"
            }
        ));
        jScrollPane3.setViewportView(topProductTable);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 375, 93));

        topProductTableOrderCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Product", "Sales Volume"
            }
        ));
        jScrollPane4.setViewportView(topProductTableOrderCatalog);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 375, 93));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable topProductTable;
    private javax.swing.JTable topProductTableOrderCatalog;
    // End of variables declaration//GEN-END:variables
}
